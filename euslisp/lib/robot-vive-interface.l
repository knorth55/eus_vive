;; -*- mode: lisp;-*-

(ros::load-ros-manifest "sensor_msgs")
(ros::load-ros-manifest "topic_tools")

(require :robot-vr-interface "package://eus_vive/euslisp/lib/robot-vr-interface.l")


(defclass robot-vive-interface
  :super robot-vr-interface
  :slots (hmd-frame-id
          vrbase-frame-id
          larm-controller-frame-id
          rarm-controller-frame-id
          feedback-topic-name
          trigger-wait-count
          menu-wait-count
          trackpad-wait-count
          grip-wait-count
          larm-trigger
          larm-prev-trigger
          larm-trigger-count
          larm-menu
          larm-prev-menu
          larm-menu-count
          larm-trackpad
          larm-prev-trackpad
          larm-trackpad-count
          larm-grip
          larm-prev-grip
          larm-grip-count
          rarm-trigger
          rarm-prev-trigger
          rarm-trigger-count
          rarm-menu
          rarm-prev-menu
          rarm-menu-count
          rarm-trackpad
          rarm-prev-trackpad
          rarm-trackpad-count
          rarm-grip
          rarm-prev-grip
          rarm-grip-count
          vrbase->shoulder-x
          vrbase->shoulder-z
          ))


(defmethod robot-vive-interface
  (:init (&rest args)
    ;; for calibration
    (send self :set-val 'vrbase->shoulder-x nil)
    (send self :set-val 'vrbase->shoulder-z nil)
    ;; for vive
    (send self :set-val 'hmd-frame-id "hmd")
    (send self :set-val 'vrbase-frame-id
          (format nil "lighthouse_LHB_~A" (ros::get-param "/eus_vive/b_lighthouse_id")))
    (send self :set-val 'larm-controller-frame-id
          (format nil "controller_LHR_~A" (ros::get-param "/eus_vive/l_controller_id")))
    (send self :set-val 'rarm-controller-frame-id
          (format nil "controller_LHR_~A" (ros::get-param "/eus_vive/r_controller_id")))
    (send self :set-val 'feedback-topic-name "/vive/set_feedback")
    (ros::subscribe (format nil "/vive/~A/joy" (send self :get-arm-val :larm :controller-frame-id))
                          sensor_msgs::Joy #'send self :controller-button-cb :larm)
    (ros::subscribe (format nil "/vive/~A/joy" (send self :get-arm-val :rarm :controller-frame-id))
                          sensor_msgs::Joy #'send self :controller-button-cb :rarm)
    (ros::advertise feedback-topic-name sensor_msgs::JoyFeedback 1)
    (send-super* :init args))
  (:reset-arm-val (arm)
    (send-super :reset-arm-val arm)
    (send self :set-arm-val arm :trigger nil)
    (send self :set-arm-val arm :prev-trigger nil)
    (send self :set-arm-val arm :trigger-count 0)
    (send self :set-arm-val arm :menu nil)
    (send self :set-arm-val arm :prev-menu nil)
    (send self :set-arm-val arm :menu-count 0)
    (send self :set-arm-val arm :trackpad nil)
    (send self :set-arm-val arm :prev-trackpad nil)
    (send self :set-arm-val arm :trackpad-count 0)
    (send self :set-arm-val arm :grip nil)
    (send self :set-arm-val arm :prev-grip nil)
    (send self :set-arm-val arm :grip-count 0))
  (:get-target-coords (arm &key (head t) (mirror nil))
    (let* ((head-coords (send self :get-head-end-coords))
           (robot-height (elt (send head-coords :worldpos) 2))
          target-pos target-rot target-coords)
      (if head
        (let ((hmd->controller-coords
                (send self :get-hmd->controller-coords
                      (if mirror (send self :get-opposite-arm arm) arm)))
               controller-coords)
          (if hmd->controller-coords
            (progn
              (setq controller-coords (send head-coords :transform hmd->controller-coords))
              (setq target-pos (send controller-coords :worldpos))
              (setq target-rot (send controller-coords :worldrot)))))
        (let ((vrbase->controller-coords
                (send self :get-vrbase->controller-coords
                      (if mirror (send self :get-opposite-arm arm) arm) :wait-trigger nil))
              vrbase->controller-pos)
          (if vrbase->controller-coords
            (progn
              (send vrbase->controller-coords
                    :transform (make-coords :rpy (float-vector pi/2 0 pi/2)) :world)
              (send vrbase->controller-coords :transform
                    (make-coords :rpy (float-vector 0 pi/2 0)))
              (send vrbase->controller-coords :transform
                    (make-coords :rpy (float-vector 0 0 -pi/2)))
              (setq vrbase->controller-pos (send vrbase->controller-coords :worldpos))
              (setq target-pos
                    (float-vector (- (elt vrbase->controller-pos 0) vrbase->shoulder-x)
                                  (elt vrbase->controller-pos 1)
                                  (- (elt vrbase->controller-pos 2) vrbase->shoulder-z)))
              (setq target-rot (send vrbase->controller-coords :worldrot))))))
      (if (and target-pos target-rot)
        (progn
          (if mirror
            (let* ((mirror-coords (make-coords :rot target-rot))
                   (rpy-angle (car (send mirror-coords :rpy-angle))))
              (setf (elt rpy-angle 0) (* -1.0 (elt rpy-angle 0)))
              (setf (elt rpy-angle 2) (* -1.0 (elt rpy-angle 2)))
              (setq mirror-coords (make-coords :rpy rpy-angle))
              (setq target-rot (send mirror-coords :worldrot))
              (setf (elt target-pos 1) (* -1.0 (elt target-pos 1)))))
          (setq target-coords
                (make-coords :pos (float-vector
                                    (+ head->shoulder-x-distance (* scale (elt target-pos 0)))
                                    (* scale (elt target-pos 1))
                                    (if head
                                      (+ robot-height (* scale (- (elt target-pos 2) robot-height)))
                                      (+ (- robot-height head->shoulder-z-distance)
                                         (* scale (elt target-pos 2)))))
                             :rot target-rot))
          (send target-coords :rotate (/ pi 4.0) :y)))
      target-coords))
  (:get-head-ypr-angle ()
    (let ((coords (send self :get-vrbase->hmd-coords)) rpy-angle)
      (if coords
        (progn
          (setq rpy-angle
                (if (> pi/2 (abs (elt (car (send coords :rpy-angle)) 0)))
                  (car (send coords :rpy-angle))
                  (cadr (send coords :rpy-angle))))
          (list (elt rpy-angle 1) (* -1 (elt rpy-angle 2)) 0)))))
  (:get-hmd->controller-coords (arm)
    (if (not (or (eq arm :larm) (eq arm :rarm)))
      (progn
        (ros::ros-error (format nil "~A arm is not supported ~%" arm))
        (return-from :get-hmd->controller-coords nil)))
    (let ((controller-frame-id (send self :get-arm-val arm :controller-frame-id))
          coords)
      (send tfl :wait-for-transform hmd-frame-id controller-frame-id (ros::time 0) 0.1)
      (setq coords (send tfl :lookup-transform hmd-frame-id controller-frame-id (ros::time 0)))
      (if coords
        (progn
          (send coords :transform (make-coords :rpy (float-vector 0 0 pi)) :world)
          (send coords :transform (make-coords :rpy (float-vector -pi/2 0 0)) :world)
          (send coords :transform (make-coords :rpy (float-vector 0 0 -pi/2)))
          (send coords :transform (make-coords :rpy (float-vector pi/2 0 0)))))
      coords))
  (:get-vrbase->controller-coords (arm &key (wait-trigger nil) (wait-time 0.1))
    (let ((controller-frame-id (send self :get-arm-val arm :controller-frame-id))
          (start-time (ros::time 0))
          coords controller-trigger-button-p)
      (if wait-trigger
        (progn
          (ros::ros-info "Waiting for trigger: ~A~%" (string-downcase arm))
          (while (and (ros::ok) (not controller-trigger-button-p))
            (setq controller-trigger-button-p
                  (send self :controller-trigger-button-p arm :button-toggle t))
            (ros::spin-once)
            (ros::sleep))))
      (send tfl :wait-for-transform vrbase-frame-id controller-frame-id start-time wait-time)
      (setq coords (send tfl :lookup-transform vrbase-frame-id controller-frame-id start-time))
      coords))
  (:get-vrbase->hmd-coords ()
    (let (coords)
      (send tfl :wait-for-transform vrbase-frame-id hmd-frame-id (ros::time 0) 0.1)
      (setq coords (send tfl :lookup-transform vrbase-frame-id hmd-frame-id (ros::time 0)))
      (if coords
        (send coords :transform (make-coords :rpy (float-vector 0 pi 0)) :world))))
  (:calib-controller (&optional (arm :rarm))
    (let (first-coords second-coords)
      (ros::rate rate)
      (ros::ros-info "Calibration start: ~A~%" (string-downcase arm))
      (ros::ros-info "Stretch your ~A arm and press trigger.~%" (string-downcase arm))
      (send robot-interface :speak "Calibration starts." :wait t :volume 0.6)
      (send robot-interface :speak
            (format nil "Please stretch your ~A arm and press trigger."
                    (if (eq arm :larm) "left" "right"))
            :wait nil :volume 0.6)
      (setq first-coords (send self :get-vrbase->controller-coords arm :wait-trigger t))
      (ros::sleep)
      (send robot-interface :speak
            (format nil "Please fold your ~A arm and press trigger."
                    (if (eq arm :larm) "left" "right"))
            :wait nil :volume 0.6)
      (ros::ros-info "Fold your ~A arm and press trigger.~%" (string-downcase arm))
      (setq second-coords (send self :get-vrbase->controller-coords arm :wait-trigger t))
      (if (and (and first-coords second-coords)
               (> (elt (send first-coords :worldpos) 2)
                  (elt (send second-coords :worldpos) 2)))
        (progn
          (send self :set-val 'scale
                (/ (send self :get-val 'arm-length)
                   (norm (v- (send second-coords :worldpos) (send first-coords :worldpos)))))
          (ros::ros-info "Calibrate scale: ~A~%" (send self :get-val 'scale))
          (send self :set-val 'vrbase->shoulder-x
                (- (elt (send second-coords :worldpos) 2) head->shoulder-x-distance))
          (send self :set-val 'vrbase->shoulder-z (elt (send second-coords :worldpos) 1))
          (ros::ros-info "Calibration end: ~A~%" (string-downcase arm))
          (send robot-interface :speak "Calibration succeeded." :wait nil :volume 0.6)
          (ros::ros-info "1st coords: ~A" (send first-coords :worldpos))
          (ros::ros-info "2nd coords: ~A" (send second-coords :worldpos))
          (send self :send-joy-feedback arm)
          t)
        (progn
          (ros::ros-error "Calibration is failed.~%")
          (send robot-interface :speak "Calibration failed." :wait t :volume 0.6)
          (ros::ros-error "1st coords: ~A" (send first-coords :worldpos))
          (ros::ros-error "2nd coords: ~A" (send second-coords :worldpos))
          (ros::duration-sleep 1)
          (send self :send-joy-feedback arm)
          nil))))
  (:controller-button-cb (arm msg)
    (if loop-enable
      (progn
        (send self :set-arm-val arm :prev-trigger (send self :get-arm-val arm :trigger))
        (send self :set-arm-val arm :prev-menu (send self :get-arm-val arm :menu))
        (send self :set-arm-val arm :prev-trackpad (send self :get-arm-val arm :trackpad))
        (send self :set-arm-val arm :prev-grip (send self :get-arm-val arm :grip))
        (send self :set-arm-val arm :trigger (> (elt (send msg :buttons) 1) 0))
        (send self :set-arm-val arm :menu (> (elt (send msg :buttons) 0) 0))
        (send self :set-arm-val arm :trackpad (> (elt (send msg :buttons) 2) 0))
        (send self :set-arm-val arm :grip (> (elt (send msg :buttons) 3) 0)))))
  (:controller-trigger-button-p (arm &key (button-toggle t))
    (let* ((trigger (send self :get-arm-val arm :trigger))
           (prev-trigger (send self :get-arm-val arm :prev-trigger))
           (trigger-count (send self :get-arm-val arm :trigger-count))
           (controller-trigger-button-p (and (not (eq trigger prev-trigger))
                                      (if button-toggle trigger t))))
      (if button-toggle
        (if (> trigger-count 0)
          (progn
            (send self :set-arm-val arm :trigger-count (- trigger-count 1))
            nil)
          (progn
            (if controller-trigger-button-p
              (progn
                (send self :set-arm-val arm :trigger-count trigger-wait-count)
                (cons controller-trigger-button-p trigger)))))
        (if controller-trigger-button-p (cons controller-trigger-button-p trigger)))))
  (:controller-menu-button-p (arm &key (button-toggle t))
    (let* ((menu (send self :get-arm-val arm :menu))
           (prev-menu (send self :get-arm-val arm :prev-menu))
           (menu-count (send self :get-arm-val arm :menu-count))
           (controller-menu-button-p (and (not (eq menu prev-menu))
                                   (if button-toggle menu t))))
      (if button-toggle
        (if (> menu-count 0)
          (progn
            (send self :set-arm-val arm :menu-count (- menu-count 1))
            nil)
          (progn
            (if controller-menu-button-p
              (progn
                (send self :set-arm-val arm :menu-count menu-wait-count)
                (cons controller-menu-button-p menu)))))
        (if controller-menu-button-p (cons controller-menu-button-p menu)))))
  (:controller-trackpad-button-p (arm &key (button-toggle t))
    (let* ((trackpad (send self :get-arm-val arm :trackpad))
           (prev-trackpad (send self :get-arm-val arm :prev-trackpad))
           (trackpad-count (send self :get-arm-val arm :trackpad-count))
           (controller-trackpad-button-p (and (not (eq trackpad prev-trackpad))
                                       (if button-toggle trackpad t))))
      (if button-toggle
        (if (> trackpad-count 0)
          (progn
            (send self :set-arm-val arm :trackpad-count (- trackpad-count 1))
            nil)
          (progn
            (if controller-trackpad-button-p
              (progn
                (send self :set-arm-val arm :trackpad-count trackpad-wait-count)
                (cons controller-trackpad-button-p trackpad)))))
        (if controller-trackpad-button-p (cons controller-trackpad-button-p trackpad)))))
  (:controller-grip-button-p (arm &key (button-toggle t))
    (let* ((grip (send self :get-arm-val arm :grip))
           (prev-grip (send self :get-arm-val arm :prev-grip))
           (grip-count (send self :get-arm-val arm :grip-count))
           (controller-grip-button-p (and (not (eq grip prev-grip))
                                   (if button-toggle grip t))))
      (if button-toggle
        (if (> grip-count 0)
          (progn
            (send self :set-arm-val arm :grip-count (- grip-count 1))
            nil)
          (progn
            (if controller-grip-button-p
              (progn
                (send self :set-arm-val arm :grip-count grip-wait-count)
                (cons controller-grip-button-p grip)))))
        (if controller-grip-button-p (cons controller-grip-button-p grip)))))
  (:send-joy-feedback (arm)
    (let (msg (id (if (eq arm :larm) 2 1)))
      (setq msg (instance sensor_msgs::JoyFeedback :init
                          :type 1 :id id :intensity 3000))
      (ros::publish feedback-topic-name msg))))


(defclass robot-move-base-vive-interface
  :super robot-vive-interface
  :slots (base-enable
          joy-org-topic-name
          joy-other-topic-name
          vx
          vy
          vw
          vx-thresh
          vy-thresh
          vw-thresh
          vx-scale
          vy-scale
          vw-scale
          ))


(defmethod robot-move-base-vive-interface
  (:init (&rest args)
    (send-super* :init args)
    ;; for move base
    (send self :set-val 'joy-org-topic-name "/joy_org")
    (send self :set-val 'joy-other-topic-name "/joy_other")
    (ros::advertise joy-other-topic-name sensor_msgs::Joy 1))
  (:reset (&key (loop-enable t))
    (send-super :reset :loop-enable loop-enable)
    (send robot-interface :clear-costmap)
    (send self :set-val 'vx 0.0)
    (send self :set-val 'vy 0.0)
    (send self :set-val 'vw 0.0)
    (send self :set-val 'base-enable nil))
  (:base-cb (&key (safe t) (mirror nil))
    (let (msg (axes (make-list 29 :initial-element 0))
              (buttons (make-list 17 :initial-element 0)))
      (cond
        ((not (or larm-trigger rarm-trigger))
         (setf (elt buttons 10) 1)
         (setf (elt buttons 12)
               (if (and larm-trackpad (not rarm-trackpad)) 1 0))
         (setf (elt buttons 14)
               (if (and (not larm-trackpad) rarm-trackpad) 1 0)))
        ((and rarm-trigger
              (or (> (abs vx) vx-thresh) (> (abs vy) vy-thresh) (> (abs vw) vw-thresh)))
         ;; for unsafe teleop
         (if (and (not safe) larm-trigger) (setf (elt buttons 9) 1))
         (setf (elt buttons 10) 1)
         (setf (elt axes 3)
               (* (if mirror -1.0 1.0)
                  (* vx-scale (if (> (abs vx) vx-thresh) vx 0.0))))
         (setf (elt axes 2)
               (* (if mirror -1.0 1.0)
                  (* vy-scale (if (> (abs vy) vy-thresh) vy 0.0))))
         (setf (elt axes 0)
               (* (if mirror -1.0 1.0)
                  (* vw-scale (if (> (abs vw) vw-thresh) vw 0.0)))))
        (t nil))
      (setq msg (instance sensor_msgs::Joy :init))
      (send msg :header :stamp (ros::time-now))
      (send msg :axes axes)
      (send msg :buttons buttons)
      (ros::publish joy-other-topic-name msg)))
  (:controller-button-cb (arm msg)
    (send-super :controller-button-cb arm msg)
    (cond
      ((eq arm :larm)
       (send self :set-val 'vw
             (if (send self :get-arm-val arm :trackpad)
               (* -1 (elt (send msg :axes) 0)) 0)))
      ((eq arm :rarm)
       (send self :set-val 'vx
             (if (send self :get-arm-val arm :trackpad)
               (elt (send msg :axes) 1) 0))
       (send self :set-val 'vy
             (if (send self :get-arm-val arm :trackpad)
               (* -1 (elt (send msg :axes) 0)) 0)))
      (t nil)))
  (:switch-joy (joy-topic-name)
    (let ((joy-mux-service-name "/multiple_joystick_mux/select")
          mux-req)
      (setq mux-req (instance topic_tools::MuxSelectRequest :init))
      (send mux-req :topic joy-topic-name)
      (ros::service-call joy-mux-service-name mux-req)))
  (:switch-joy-to-controller ()
    (send self :switch-joy joy-other-topic-name))
  (:switch-joy-to-ps3joy ()
    (send self :switch-joy joy-org-topic-name))
  (:enable-cb (&key (mirror nil) (base t) (button :menu))
    (send-super :enable-cb :mirror mirror :button button)
    (if base (send self :enable-base)))
  (:enable-base ()
    (cond
      ((and (not larm-enable) (not rarm-enable))
       (if (not base-enable) (send self :switch-joy-to-controller))
       (send self :set-val 'base-enable t))
      ((or larm-enable rarm-enable)
       (if base-enable (send self :switch-joy-to-ps3joy))
       (send self :set-val 'base-enable nil))
      (t nil)))
  (:motion-cb (&key (head t) (torso t) (base t) (safe-arm t) (safe-base nil) (mirror nil)
                    (gripper-button :trigger))
    (let (visualize-arm-coords)
      (cond
        ((or larm-enable rarm-enable)
         (setq visualize-arm-coords
               (send self :arm-motion-cb :head head :torso torso :safe safe-arm :mirror mirror
                     :gripper-button gripper-button)))
        ((and loop-enable base-enable)
         (if base (send self :base-cb :safe safe-base :mirror mirror)))
        (t nil))
      visualize-arm-coords))
  (:main-loop-step (&key (head t) (torso t) (base t) (safe-arm t) (safe-base nil) (mirror nil)
                         (enable-button :menu) (gripper-button :trigger) (visualize t))
    (let (visualize-arm-coords)
      (send self :update-current-end-coords)
      (send self :enable-cb :mirror mirror :base base :button enable-button)
      (setq visualize-arm-coords
            (send self :motion-cb :head head :torso torso
                  :base base :safe-arm safe-arm :safe-base safe-base :mirror mirror
                  :gripper-button gripper-button))
      (if (and head loop-enable) (send self :head-cb))
      (if visualize (send self :visualize visualize-arm-coords)))))

(provide :robot-vive-interface)
