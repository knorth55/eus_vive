<launch>
  <arg name="kinfu" default="false" />
  <arg name="respeaker" default="true" />

  <!-- camera-->
  <arg name="DECOMP_CAMERA_INFO"
       default="/kinect_head_decompressed/depth_registered/camera_info" />
  <arg name="DECOMP_RGB_CAMERA_INFO"
       default="/kinect_head_decompressed/rgb/camera_info" />
  <arg name="DECOMP_IMAGE_DEPTH"
       default="/kinect_head_decompressed/depth_registered/image_rect" />
  <arg name="DECOMP_IMAGE_COLOR" default="/kinect_head_decompressed/rgb/image_rect_color" />
  <arg name="DECOMP_POINTS" default="/kinect_head_decompressed/depth_registered/points" />

  <arg name="CAMERA_INFO" default="/kinect_head/depth_registered/camera_info" />
  <arg name="RGB_CAMERA_INFO" default="/kinect_head/rgb/camera_info" />
  <arg name="IMAGE_COLOR" default="/kinect_head/rgb/image_rect_color" />
  <arg name="IMAGE_DEPTH" default="/kinect_head/depth_registered/image_rect" />
  <arg name="IMAGE_DEPTH_TYPE" default="compressedDepth" />

  <group ns="kinect_head_decompressed">
    <node name="camera_info_relay" pkg="topic_tools" type="relay"
          args="$(arg CAMERA_INFO) $(arg DECOMP_CAMERA_INFO)" />
    <node name="rgb_camera_info_relay" pkg="topic_tools" type="relay"
          args="$(arg RGB_CAMERA_INFO) $(arg DECOMP_RGB_CAMERA_INFO)" />
    <node name="depth_image_transport" pkg="image_transport" type="republish"
          args="$(arg IMAGE_DEPTH_TYPE) in:=$(arg IMAGE_DEPTH) raw out:=$(arg DECOMP_IMAGE_DEPTH)" />
    <node name="rgb_image_transport" pkg="image_transport" type="republish"
          args="compressed in:=$(arg IMAGE_COLOR) raw out:=$(arg DECOMP_IMAGE_COLOR)" />
    <node name="point_cloud_xyzrgb" pkg="nodelet" type="nodelet"
          args="standalone depth_image_proc/point_cloud_xyzrgb" output="screen">
      <param name="queue_size" value="100" />
    </node>
  </group>

  <node name="rosconsole_overlay_text"
        pkg="jsk_rviz_plugins" type="rosconsole_overlay_text.py">
    <rosparam>
      nodes:
        - /pr2_vr_main
      exclude_regexes:
        - .*follow_joint_trajectory.*
        - .*:joint-angle.*
        - .*:wait-interpolation-until.*
        - ^;;.*
        - if you do not have gripper,.*
    </rosparam>
  </node>

  <!-- launch robot sounder -->
  <node name="eus_vive_status_sounder"
      pkg="eus_vive" type="eus_vive_status_sounder.py">
    <remap from="~output/sound" to="/remotesound" />
    <remap from="~input/status" to="/eus_vive/status" />
  </node>
  <include file="$(find eus_vive)/launch/include/audio_play.launch" if="$(arg respeaker)">
    <arg name="audio_ns" value="remote_audio" />
  </include>
  <node name="remote_soundplay_node"
        pkg="sound_play" type="soundplay_node.py">
    <remap from="robotsound" to="remotesound" />
    <remap from="sound_play" to="remotesound" />
  </node>
  <node name="remote_soundplay_jp_node"
        pkg="sound_play" type="soundplay_node.py">
    <remap from="robotsound" to="remotesound_jp" />
    <remap from="sound_play" to="remotesound_jp" />
  </node>

  <!-- virtual camera -->
  <group ns="virtual_camera">
    <group ns="left">
      <node name="virtual_camera_tf_static_transform_publisher" pkg="tf" type="static_transform_publisher"
            args="-0.0315 0 0.01 0 0 0 /head_mount_kinect_rgb_optical_frame /virtual_camera_left_rgb_optical_frame 100" />
      <node name="virtual_camera_info_publisher" pkg="eus_vive" type="virtual_camera_info_publisher.py"
            output="screen">
        <remap from="~input/camera_info" to="$(arg DECOMP_CAMERA_INFO)" />
        <rosparam>
          frame_id: virtual_camera_left_rgb_optical_frame
          height: 1080
          width: 1200
        </rosparam>
      </node>
      <node name="depth_image_creator" pkg="nodelet" type="nodelet"
            args="standalone jsk_pcl/DepthImageCreator" output="screen">
        <remap from="~input" to="$(arg DECOMP_POINTS)" />
        <remap from="~info" to="virtual_camera_info_publisher/output/camera_info" />
      </node>
    </group>
    <group ns="right">
      <node name="virtual_camera_tf_static_transform_publisher" pkg="tf" type="static_transform_publisher"
            args="0.0315 0 0.01 0 0 0 /head_mount_kinect_rgb_optical_frame /virtual_camera_right_rgb_optical_frame 100" />
      <node name="virtual_camera_info_publisher" pkg="eus_vive" type="virtual_camera_info_publisher.py"
            output="screen">
        <remap from="~input/camera_info" to="$(arg DECOMP_CAMERA_INFO)" />
        <rosparam>
          frame_id: virtual_camera_right_rgb_optical_frame
          height: 1080
          width: 1200
        </rosparam>
      </node>
      <node name="depth_image_creator" pkg="nodelet" type="nodelet"
            args="standalone jsk_pcl/DepthImageCreator" output="screen">
        <remap from="~input" to="$(arg DECOMP_POINTS)" />
        <remap from="~info" to="virtual_camera_info_publisher/output/camera_info" />
      </node>
    </group>
  </group>

  <!-- launch rviz -->
  <node name="$(anon rviz)" pkg="rviz" type="rviz" if="$(arg kinfu)"
        args="-d $(find eus_vive)/rvizconfig/pr2/pr2_vr_visualization_with_kinfu.rviz" respawn="true" />
  <node name="$(anon rviz)" pkg="rviz" type="rviz" unless="$(arg kinfu)"
        args="-d $(find eus_vive)/rvizconfig/pr2/pr2_vr_visualization.rviz" respawn="true" />

  <!-- launch rqt_gui -->
  <include file="$(find eus_vive)/launch/include/rqt_gui.launch" />

</launch>
