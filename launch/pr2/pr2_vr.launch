<launch>
  <arg name="main" default="true" />
  <arg name="vive" default="true" />
  <arg name="oculus" default="false" />
  <arg name="head" default="true" />
  <arg name="respeaker" default="true" />
  <arg name="mirror" default="false" />
  <arg name="logging" default="true" />
  <arg name="kinfu" default="false" />
  <arg name="display" default="true" />
  <arg name="home_dir" default="$(env HOME)" />

  <!-- vive -->
  <arg name="button_toggle" default="true" />
  <arg name="b_lighthouse_id" default="" />
  <arg name="c_lighthouse_id" default="" />
  <arg name="l_controller_id" default="" />
  <arg name="r_controller_id" default="" />

  <!-- workspace -->
  <arg name="workspace_max_x" default="false" />
  <arg name="workspace_min_x" default="false" />
  <arg name="workspace_max_y" default="false" />
  <arg name="workspace_min_y" default="false" />
  <arg name="workspace_max_z" default="false" />
  <arg name="workspace_min_z" default="false" />

  <!-- camera-->
  <arg name="image_left" default="/virtual_camera/left/rviz_image" />
  <arg name="image_right" default="/virtual_camera/right/rviz_image" />
  <arg name="DECOMP_CAMERA_INFO"
       default="/kinect_head_decompressed/depth_registered/camera_info" />
  <arg name="DECOMP_RGB_CAMERA_INFO"
       default="/kinect_head_decompressed/rgb/camera_info" />
  <arg name="DECOMP_IMAGE_DEPTH"
       default="/kinect_head_decompressed/depth_registered/image_rect" />
  <arg name="DECOMP_IMAGE_COLOR" default="/kinect_head_decompressed/rgb/image_rect_color" />
  <arg name="DECOMP_POINTS" default="/kinect_head_decompressed/depth_registered/points" />

  <!-- device -->
  <arg name="device" value=":oculus" if="$(arg oculus)" />
  <arg name="device" value=":vive" unless="$(arg oculus)" />

  <!-- pr1012 and pr1040 parameters -->
  <arg name="CAMERA_INFO" />
  <arg name="RGB_CAMERA_INFO" />
  <arg name="IMAGE_COLOR" />
  <arg name="IMAGE_DEPTH" />
  <arg name="IMAGE_DEPTH_TYPE" />
  <arg name="COMP_IMAGE_COLOR" />
  <arg name="COMP_IMAGE_DEPTH" />

  <!-- prosilica -->
  <!--
  <arg name="PROSILICA_RGB_CAMERA_INFO"
       default="/prosilica/camera_info" />
  <arg name="PROSILICA_IMAGE_COLOR"
       default="/prosilica/image_rect" />
  <arg name="PROSILICA_DECOMP_RGB_CAMERA_INFO"
       default="/prosilica_decompressed/rgb/camera_info" />
  <arg name="PROSILICA_DECOMP_IMAGE_COLOR"
       default="/prosilica_decompressed/rgb/image_rect_color" />

  <group ns="prosilica_decompressed">
    <node name="rgb_camera_info_relay" pkg="topic_tools" type="relay"
          args="$(arg PROSILICA_RGB_CAMERA_INFO) $(arg PROSILICA_DECOMP_RGB_CAMERA_INFO)" />
    <node name="rgb_image_transport" pkg="image_transport" type="republish"
          args="theora in:=$(arg PROSILICA_IMAGE_COLOR) raw out:=$(arg PROSILICA_DECOMP_IMAGE_COLOR)" />
  </group>
  -->

  <param name="robot_description_semantic" textfile="$(find pr2_moveit_config)/config/pr2.srdf" />

  <group ns="virtual_camera">
    <group ns="left">
      <node name="virtual_camera_tf_static_transform_publisher" pkg="tf" type="static_transform_publisher"
            args="-0.0315 0 0 0 0 0 /head_mount_kinect_rgb_optical_frame /virtual_camera_left_rgb_optical_frame 100" />
      <node name="virtual_camera_info_publisher" pkg="eus_vive" type="virtual_camera_info_publisher.py"
            output="screen">
        <remap from="~input/camera_info" to="$(arg DECOMP_CAMERA_INFO)" />
        <rosparam>
          frame_id: virtual_camera_left_rgb_optical_frame
          height: 1080
          width: 1200
        </rosparam>
      </node>
      <node name="depth_image_creator" pkg="nodelet" type="nodelet"
            args="standalone jsk_pcl/DepthImageCreator" output="screen">
        <remap from="~input" to="$(arg DECOMP_POINTS)" />
        <remap from="~info" to="virtual_camera_info_publisher/output/camera_info" />
      </node>
    </group>
    <group ns="right">
      <node name="virtual_camera_tf_static_transform_publisher" pkg="tf" type="static_transform_publisher"
            args="0.0315 0 0 0 0 0 /head_mount_kinect_rgb_optical_frame /virtual_camera_right_rgb_optical_frame 100" />
      <node name="virtual_camera_info_publisher" pkg="eus_vive" type="virtual_camera_info_publisher.py"
            output="screen">
        <remap from="~input/camera_info" to="$(arg DECOMP_CAMERA_INFO)" />
        <rosparam>
          frame_id: virtual_camera_right_rgb_optical_frame
          height: 1080
          width: 1200
        </rosparam>
      </node>
      <node name="depth_image_creator" pkg="nodelet" type="nodelet"
            args="standalone jsk_pcl/DepthImageCreator" output="screen">
        <remap from="~input" to="$(arg DECOMP_POINTS)" />
        <remap from="~info" to="virtual_camera_info_publisher/output/camera_info" />
      </node>
    </group>
  </group>

  <include file="$(find eus_vive)/launch/include/kinfu.launch" if="$(arg kinfu)">
    <arg name="CAMERA_INFO" value="$(arg DECOMP_CAMERA_INFO)" />
    <arg name="IMAGE_DEPTH" value="$(arg DECOMP_IMAGE_DEPTH)" />
    <arg name="IMAGE_COLOR" value="$(arg DECOMP_IMAGE_COLOR)" />
  </include>

  <include file="$(find eus_vive)/launch/include/vive.launch" if="$(arg vive)">
    <arg name="image_left" value="$(arg image_left)" />
    <arg name="image_right" value="$(arg image_right)" />
  </include>

  <group ns="eus_vive" if="$(arg vive)">
    <rosparam subst_value="true">
      button_toggle: $(arg button_toggle)
      b_lighthouse_id: $(arg b_lighthouse_id)
      c_lighthouse_id: $(arg c_lighthouse_id)
      l_controller_id: $(arg l_controller_id)
      r_controller_id: $(arg r_controller_id)
      workspace:
        max_x: $(arg workspace_max_x)
        min_x: $(arg workspace_min_x)
        max_y: $(arg workspace_max_y)
        min_y: $(arg workspace_min_y)
        max_z: $(arg workspace_max_z)
        min_z: $(arg workspace_min_z)
    </rosparam>
  </group>
  <group ns="eus_vive" unless="$(arg vive)">
    <rosparam subst_value="true">
      button_toggle: $(arg button_toggle)
      workspace:
        max_x: $(arg workspace_max_x)
        min_x: $(arg workspace_min_x)
        max_y: $(arg workspace_max_y)
        min_y: $(arg workspace_min_y)
        max_z: $(arg workspace_max_z)
        min_z: $(arg workspace_min_z)
    </rosparam>
  </group>
  <group if="$(arg main)">
    <group if="$(arg mirror)">
      <node if="$(arg head)" pkg="eus_vive" type="pr2-vr-main.l" name="pr2_vr_main"
            args="&quot;(main :head t :mirror t :loop-enable nil :device-type $(arg device))&quot;" output="screen" />
      <node unless="$(arg head)" pkg="eus_vive" type="pr2-vr-main.l" name="pr2_vr_main"
            args="&quot;(main :head nil :mirror t :loop-enable nil :device-type $(arg device))&quot;" output="screen" />
    </group>
    <group unless="$(arg mirror)">
      <node if="$(arg head)" pkg="eus_vive" type="pr2-vr-main.l" name="pr2_vr_main"
            args="&quot;(main :head t :mirror nil :loop-enable nil :device-type $(arg device))&quot;" output="screen" />
      <node unless="$(arg head)" pkg="eus_vive" type="pr2-vr-main.l" name="pr2_vr_main"
            args="&quot;(main :head nil :mirror nil :loop-enable nil :device-type $(arg device))&quot;" output="screen" />
    </group>
  </group>

  <!-- launch display -->
  <include file="$(find eus_vive)/launch/pr2/pr2_vr_display.launch">
    <arg name="respeaker" value="$(arg respeaker)" />
    <arg name="kinfu" value="$(arg kinfu)" />
    <arg name="DECOMP_CAMERA_INFO" value="$(arg DECOMP_CAMERA_INFO)" />
    <arg name="DECOMP_RGB_CAMERA_INFO" value="$(arg DECOMP_RGB_CAMERA_INFO)" />
    <arg name="DECOMP_IMAGE_DEPTH" value="$(arg DECOMP_IMAGE_DEPTH)" />
    <arg name="DECOMP_IMAGE_COLOR" value="$(arg DECOMP_IMAGE_COLOR)" />
    <arg name="DECOMP_POINTS" value="$(arg DECOMP_POINTS)" />
    <arg name="CAMERA_INFO" value="$(arg CAMERA_INFO)" />
    <arg name="RGB_CAMERA_INFO" value="$(arg RGB_CAMERA_INFO)" />
    <arg name="IMAGE_COLOR" value="$(arg IMAGE_COLOR)" />
    <arg name="IMAGE_DEPTH" value="$(arg IMAGE_DEPTH)" />
    <arg name="IMAGE_DEPTH_TYPE" value="$(arg IMAGE_DEPTH_TYPE)" />
  </include>

  <!-- launch logging -->
  <include file="$(find eus_vive)/launch/pr2/pr2_logging.launch" if="$(arg logging)">
    <arg name="CAMERA_INFO" value="$(arg CAMERA_INFO)" />
    <arg name="RGB_CAMERA_INFO" value="$(arg RGB_CAMERA_INFO)" />
    <arg name="COMP_IMAGE_COLOR" value="$(arg COMP_IMAGE_COLOR)" />
    <arg name="COMP_IMAGE_DEPTH" value="$(arg COMP_IMAGE_DEPTH)" />
    <arg name="home_dir" value="$(arg home_dir)" />
  </include>

</launch>
